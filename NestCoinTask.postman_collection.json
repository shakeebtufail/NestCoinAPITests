{
	"info": {
		"_postman_id": "f5ea1a78-3a96-4bda-9c9d-8b1d0c000142",
		"name": "NestCoinTask",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "GetSingleUser",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response time is less than 1000ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
							"});\r",
							"pm.test(\"Successful Get request\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"Body matches string\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"id\"  && \"first_name\" && \"avatar\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{reqres}}users/5",
					"host": [
						"{{reqres}}users"
					],
					"path": [
						"5"
					]
				}
			},
			"response": []
		},
		{
			"name": "GetSingleUser (invalid ID)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response time is less than 1000ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
							"});\r",
							"pm.test(\"Not Found\", function () {\r",
							"    pm.response.to.have.status(404);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{reqres}}users/200",
					"host": [
						"{{reqres}}users"
					],
					"path": [
						"200"
					]
				}
			},
			"response": []
		},
		{
			"name": "CreateUser",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response time is less than 1000ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
							"pm.test(\"Status code is 201\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"pm.test(\"Response verified\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"createdAt\" && \"id\");\r",
							"});\r",
							"pm.test(\"Status code has Created\", function () {\r",
							"    pm.response.to.have.status(\"Created\");\r",
							"    });\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {}
			},
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"morpheus\",\r\n    \"job\": \"leader\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{reqres}}users",
					"host": [
						"{{reqres}}users"
					]
				}
			},
			"response": []
		},
		{
			"name": "CreateUser (with Empty Body Parameters)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response time is less than 1000ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
							"});\r",
							"pm.test(\"Response verified\", function () {\r",
							"    pm.expect(pm.response.text()).to.not.include(\"createdAt\" && \"id\");\r",
							"});\r",
							"pm.test(\"Status code has Bad Request\", function () {\r",
							"    pm.response.to.have.status(\"Bad Request\");\r",
							"    });\r",
							"pm.test(\"Status code is 400\", function () {\r",
							"    pm.response.to.have.status(400);    \r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"\",\r\n    \"job\": \"\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{reqres}}users",
					"host": [
						"{{reqres}}users"
					]
				}
			},
			"response": []
		},
		{
			"name": "CreateUser (EmptyBody)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response time is less than 1000ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
							"});\r",
							"pm.test(\"Status code is 400\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"pm.test(\"Response verified\", function () {\r",
							"    pm.expect(pm.response.text()).to.not.include(\"createdAt\");\r",
							"});\r",
							"pm.test(\"Status code has Bad Request\", function () {\r",
							"    pm.response.to.have.status(\"Bad request\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{reqres}}users",
					"host": [
						"{{reqres}}users"
					]
				}
			},
			"response": []
		},
		{
			"name": "UpdateUser",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response time is less than 1000ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"Body matches string\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"updatedAt\");\r",
							"});\r",
							"pm.test(\"Status code name has string\", function () {\r",
							"    pm.response.to.have.status(\"OK\");\r",
							"    });\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"update user\",\r\n    \"job\": \"QA\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{reqres}}users/2",
					"host": [
						"{{reqres}}users"
					],
					"path": [
						"2"
					]
				}
			},
			"response": []
		},
		{
			"name": "UpdateUser (invalid ID)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response time is less than 1000ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
							"});\r",
							"pm.test(\"Response verified\", function () {\r",
							"    pm.expect(pm.response.text()).to.not.include(\"updatedAt\");\r",
							"});\r",
							"pm.test(\"Status code has Not Found\", function () {\r",
							"    pm.response.to.have.status(\"Not Found\");\r",
							"    });\r",
							"pm.test(\"Status code is 400\", function () {\r",
							"    pm.response.to.have.status(404);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"UPDATE USER\",\r\n    \"job\": \"QA\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{reqres}}users/200",
					"host": [
						"{{reqres}}users"
					],
					"path": [
						"200"
					]
				}
			},
			"response": []
		},
		{
			"name": "UpdateUser (Empty Body & without ID)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response time is less than 1000ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
							"});\r",
							"pm.test(\"Response verified\", function () {\r",
							"    pm.expect(pm.response.text()).to.not.include(\"updatedAt\");\r",
							"});\r",
							"pm.test(\"Status code name has string\", function () {\r",
							"    pm.response.to.have.status(\"Bad Request\");\r",
							"    });\r",
							"pm.test(\"Status code is 400\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{reqres}}users",
					"host": [
						"{{reqres}}users"
					]
				}
			},
			"response": []
		},
		{
			"name": "UpdateUser (without ID)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response time is less than 1000ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
							"});\r",
							"pm.test(\"Response verified\", function () {\r",
							"    pm.expect(pm.response.text()).to.not.include(\"updatedAt\");\r",
							"});\r",
							"pm.test(\"Status code has Bad Request\", function () {\r",
							"    pm.response.to.have.status(\"Bad Request\");\r",
							"    });\r",
							"pm.test(\"Status code is 400\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"update user\",\r\n    \"job\": \"QA\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{reqres}}users",
					"host": [
						"{{reqres}}users"
					]
				}
			},
			"response": []
		},
		{
			"name": "UpdateUser (EmptyBody)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response time is less than 1000ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
							"});\r",
							"pm.test(\"Response verified\", function () {\r",
							"    pm.expect(pm.response.text()).to.not.include(\"updatedAt\");\r",
							"});\r",
							"pm.test(\"Status code has Bad Request\", function () {\r",
							"    pm.response.to.have.status(\"Bad Request\");\r",
							"    });\r",
							"pm.test(\"Status code is 400\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{reqres}}users/2",
					"host": [
						"{{reqres}}users"
					],
					"path": [
						"2"
					]
				}
			},
			"response": []
		},
		{
			"name": "UpdateUser",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response time is less than 1000ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
							"});\r",
							"pm.test(\"Response verified\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"updatedAt\");\r",
							"});\r",
							"pm.test(\"Status code name has string\", function () {\r",
							"    pm.response.to.have.status(\"OK\");\r",
							"    });\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\" : \"test user\" ,\r\n    \"job\" : \"QA\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{reqres}}users/20000000",
					"host": [
						"{{reqres}}users"
					],
					"path": [
						"20000000"
					]
				}
			},
			"response": []
		},
		{
			"name": "UpdateUser (with invalid ID)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response time is less than 1000ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
							"});\r",
							"pm.test(\"Response verified\", function () {\r",
							"    pm.expect(pm.response.text()).to.not.include(\"updatedAt\");\r",
							"});\r",
							"pm.test(\"Status code has Not Found\", function () {\r",
							"    pm.response.to.have.status(\"Not Found\");\r",
							"    });\r",
							"pm.test(\"Status code is 404\", function () {\r",
							"    pm.response.to.have.status(404);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\" : \"test user\" ,\r\n    \"job\" : \"QA\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{reqres}}users/20000000",
					"host": [
						"{{reqres}}users"
					],
					"path": [
						"20000000"
					]
				}
			},
			"response": []
		},
		{
			"name": "UpdateUser (Empty Body & without ID)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response time is less than 1000ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
							"});\r",
							"pm.test(\"Response verified\", function () {\r",
							"    pm.expect(pm.response.text()).to.not.include(\"updatedAt\");\r",
							"});\r",
							"pm.test(\"Status code has Bad Request\", function () {\r",
							"    pm.response.to.have.status(\"Bad Request\");\r",
							"    });\r",
							"pm.test(\"Status code is 400\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{reqres}}users",
					"host": [
						"{{reqres}}users"
					]
				}
			},
			"response": []
		},
		{
			"name": "UpdateUser (Empty Body)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response time is less than 1000ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
							"});\r",
							"pm.test(\"Response verified\", function () {\r",
							"    pm.expect(pm.response.text()).to.not.include(\"updatedAt\");\r",
							"});\r",
							"pm.test(\"Status code has Bad Request\", function () {\r",
							"    pm.response.to.have.status(\"Bad Request\");\r",
							"    });\r",
							"pm.test(\"Status code is 400\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{reqres}}users/2",
					"host": [
						"{{reqres}}users"
					],
					"path": [
						"2"
					]
				}
			},
			"response": []
		},
		{
			"name": "UpdateUser (without ID)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response time is less than 1000ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
							"});\r",
							"pm.test(\"Response verified\", function () {\r",
							"    pm.expect(pm.response.text()).to.not.include(\"updatedAt\");\r",
							"});\r",
							"pm.test(\"Status code has Bad Request\", function () {\r",
							"    pm.response.to.have.status(\"Bad Request\");\r",
							"    });\r",
							"pm.test(\"Status code is 400\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\" : \"test user\" ,\r\n    \"job\" : \"QA\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{reqres}}users",
					"host": [
						"{{reqres}}users"
					]
				}
			},
			"response": []
		}
	]
}